https://v1-29.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm ------> (source link)

sudo swapoff -a


container runtime:
=====================
https://v1-29.docs.kubernetes.io/docs/setup/production-environment/container-runtimes/ ----->(source link)
===========================================================================
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay

sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

lsmod | grep br_netfilter

lsmod | grep overlay


docker engine installation:
=============================

https://docs.docker.com/engine/install/ubuntu/  ----.(source link)
=======================================

sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
sudo apt-get update

sudo apt-get install containerd.io


============================
Cgroup driver:
============================

containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' | sed 's/sandbox_image = “registry.k8s.io\/pause:3.6”/sandbox_image = “registry.k8s.io\/pause:3.9”/' | sudo tee /etc/containerd/config.toml

sudo systemctl restart containerd

sudo systemctl status containerd


Insatalling kubelet kubeadm and kubectl:
============================================

sudo apt-get install -y apt-transport-https ca-certificates curl gpg


curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

Installing kubeinit:execute in master only not in worker####
===============================

sudo kubeadm init --pod-network-cidr=<provide your vpc/subnet cidr>10.200.0.0/16 --apiserver-advertise-address=<provide your master node pvt ip>


$$$$After executing the above command please run the command the commands that will appera on the screen after the avove command execuition:

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

#####Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.50.115:6443 --token hhw96k.6nyhkpo5b4b50in5 \
        --discovery-token-ca-cert-hash sha256:2fa3270b5e0cf3816cfbeee77013fd1fe4f278a8bdc37d922a1a55caf0eb020a ---->>> execute in worker nodes to join with master nodes

kubeadm token create --print-join-command ------>to reterive kubeadm join token


kubectl get nodes
 but nodes status is not ready for that we need to install container network interface(CNI)


 
 
 visit the github page:
 
 https://github.com/flannel-io/flannel
 
 https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml -->>> download the manifest file from this link
     
	 Edit and provide your vpc/subnet cidr in line 91
	 To find the name of the internal network interface use the below command
	                   command: ip addr show
					   
	now copy that manifest file to your server and execute the below command
	
	kubectl apply -f <provide your manifest file>
	 then check the status of nodes
	 
	 kubectl get nodes -A
	 kubectl get nodes 
		
		
		
